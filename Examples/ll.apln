:Namespace ll
⍝ Parallel Extensions - updated for Dyalog'22 TP2 workshop

    (⎕IO ⎕ML ⎕WX)←1 1 3

    Each←{⍺←⊢ ⋄ ⍺ (⍺⍺ EachX ⍬) ⍵}

    ∇ RESULT←{left}(fns EachX iss)right;dyadic;fn;cb;SHAPE;i;count;next;callbk;expr;z;PF;cancelled;cbprovided;noIso;cr;USER_DATA;ISO_COUNT;N;ISO_COUNTERS;INDEX;DONE;FAILED
    ⍝ IÏ using queueing on persistent Isolates:
    ⍝
    ⍝ iss is a list of refs to pre-existing isolates to use
    ⍝     or if scalar, processors×processes clones will be made
    ⍝
    ⍝ fns is either:
    ⍝     a simple char vec name of function expected to be in supplied isolates
    ⍝     a nested vec of two fn names, in which case 2nd name is a progress callback
    ⍝       3rd optional element becomes USER_DATA
    ⍝     use empty callback fn for default display
    ⍝
    ⍝ Documented semi-globals available to callback functions
    ⍝
    ⍝ SHAPE:        Shape of array
    ⍝ N:            ×/SHAPE
    ⍝ RESULT:       Ravelled result
    ⍝ DONE:         1 when corresponding element computed
    ⍝ FAILED:       1 if corresponding element failed
    ⍝ INDEX:        Progress index
    ⍝ ISO_COUNT:    Number of isolates in use
    ⍝ ISO_COUNTERS: Number of calls processed by each isolate
    ⍝ THIS:         Current index
    ⍝ ISO_IX:       Index of isolate that produced the result
    ⍝ USER_DATA:    User-provided information
     
      :If dyadic←2=⎕NC'left' ⍝ Scalar extension
          :If 1=×/⍴left ⋄ left←(⍴right)⍴left
          :ElseIf 1=×/⍴right ⋄ right←(⍴left)⍴right
          :EndIf
      :EndIf
     
      :If noIso←0=≢iss ⋄ iss←⊂'' ⋄ :EndIf ⍝ No isolate passed
     
      :If 3=⎕NC'fns'          ⍝ A real function? Tranfer to isolate.
          :If 1=⍴⍴cr←⎕CR'fns' ⋄ fns←(⊃cr)''⊣⎕EX'fns' ⋄ ⍝ primitive?
          :Else
              :If noIso ⋄ iss←⎕NS'' ⋄ :EndIf
              fn←⊃(,iss).⎕FX⊂⎕CR'fns'
              fns←fn'' ''⊣⎕EX'fns'
          :EndIf
      :EndIf
     
      :If 0=⍴⍴iss ⍝ If scalar namespace, clone it
          iss←#.isolate.{New¨(×/Config¨'processors' 'processes')⍴⍵}iss
      :EndIf
     
      ISO_COUNT←≢iss
      SHAPE←⍴right
      N←≢right←,right ⋄ :If dyadic ⋄ left←,left ⋄ :EndIf
      ISO_COUNTERS←ISO_COUNT⍴0 ⋄ DONE←FAILED←N⍴INDEX←0
      RESULT←N⍴⎕NULL
     
      :If cbprovided←2=≡fns   ⍝ We MAY have a callback function
          (fn cb USER_DATA)←3↑fns,'' ''
          cbprovided←cb∨.≠' ' ⍝ We DO have a callback function
          USER_DATA,←(0=≢USER_DATA)/'ll.Each Progress - ',fn,' (',(⍕N),' calls)'
      :Else
          fn←fns ⋄ (cb USER_DATA)←'' 'll.Each Progress'
      :EndIf
     
      :If 0=⍴cb ⍝ Default Progress Form
          :If PEACHForm USER_DATA ⍝ check we can create it
              cb←'PEACHUpdate'
          :EndIf
      :EndIf ⍝ Default
     
      :If cbprovided
          callbk←(⊃⎕RSI)⍎cb
      :Else
          callbk←⍎cb,(0=≢cb)/'{0}'
      :EndIf
     
      expr←(dyadic/'(THIS⊃left) '),'iso.{',(dyadic/'⍺ '),fn,' ⍵} THIS⊃right'
      cancelled←0
      :If 1=≢iss ⍝ Only one: do it in main thread
          z←1 run1iso⊃iss
      :Else
          z←⎕TSYNC(⍳ISO_COUNT)run1iso&¨iss
      :EndIf
      ⎕SIGNAL cancelled/6
      RESULT←SHAPE⍴RESULT
    ∇

    ∇ z←ISO_IX run1iso iso;THIS
     ⍝ drive isolate #iso until we are done
     ⍝ NB semi-globals from EachX: r n count counts bclarg callbk cancelled
     
      z←0
      :While N≥THIS←INDEX←INDEX+1 ⍝ no more to do
          :Trap 0
              RESULT[THIS]←⊂⍎expr
              DONE[THIS]←1
              ISO_COUNTERS[ISO_IX]+←1
          :Else
              FAILED[THIS]←1
          :EndTrap                   

          :If callbk USER_DATA
              →0⊣z←''⊣cancelled←1
          :EndIf
      :EndWhile
    ∇

    ∇ r←PEACHForm dummy;p;labels;pos;pb;n;steps
    ⍝ Make a progress form with a progress bar per process and one for the total
     
      steps←⌈2×N÷ISO_COUNT ⍝ Estimate number of steps we'll need to show
     
      :Trap 0
          r←1⊣'PF'⎕WC'Form'USER_DATA('Coord' 'Pixel')('Size'((40+25×1+ISO_COUNT)800))('Border' 3)
      :Else ⋄ →r←0 ⍝ Unable to create a form
      :EndTrap
      PF.texts←PF.bars←(1+ISO_COUNT)⍴⎕NS''
      labels←({'Iso #',⍕⍵}¨⍳ISO_COUNT),⊂'Total'
     
      :For p :In ⍳1+ISO_COUNT
          pos←10+25×p-1
          ('PF.L',⍕p)⎕WC'Label'(p⊃labels)(pos 20)(⍬ 60)
          (n←'PF.T',⍕p)⎕WC'Label' '0'(pos 70)(⍬ 30)('justify' 'right')
          PF.texts[p]←⍎n
          (n←'PF.PB',⍕p)⎕WC'ProgressBar'((pos+3)110)(⍬ 655)('Limits'(0 steps))
          PF.bars[p]←⍎n
      :EndFor
      pos←10+25×p
      ('PF.LF')⎕WC'Label' 'Failed:'(pos 20)
      (n←'PF.FAILED')⎕WC'Label' '0'(pos 70)(⍬ 30)('justify' 'right')
      (⊃⌽PF.bars).Limits←0 N ⍝ Last bar shows total progress
      2 ⎕NQ'.' 'Flush'
    ∇

    ∇ {abort}←PEACHUpdate dummy;n
      :Trap 999⌈abort←0
          PF.texts.Caption←⍕¨n←ISO_COUNTERS,+/DONE
          PF.bars.Thumb←n
          :If ∨/FAILED ⋄ 
              PF.FAILED.Caption←⍕+/FAILED
              PF.(LF FAILED).FCol←⊂255 0 0
          :EndIf
      :Else
          abort←1 ⍝ User probably killed the GUI
      :EndTrap
    ∇

:EndNamespace
